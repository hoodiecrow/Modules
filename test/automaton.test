package require tcltest
namespace import ::tcltest::*

::tcltest::configure {*}$argv

::tcltest::testConstraint skip 0
::tcltest::testConstraint noskip 1

::tcltest::loadTestedCommands

package require automaton

test tape-1.0 {} -body {
    ::automaton::Tape create foo a b c
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c} 2}

test tape-1.1 {} -body {
    ::automaton::Tape create foo a b c
    foo R ; foo L ; foo L ; foo L ; foo L
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{_ a b c _} 0}

test tape-1.2 {} -body {
    ::automaton::Tape create foo -length 4 a b c
    foo R ; foo L ; foo L ; foo L ; foo L
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c _} 0}

test tape-1.3 {} -body {
    ::automaton::Tape create foo -length 3 a b c
    foo R ; foo L ; foo L ; foo L ; foo L
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c} 0}

test tape-1.4 {} -body {
    ::automaton::Tape create foo a b c
    foo L ; foo write x
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a x c} 1}

test tape-1.5 {} -body {
    ::automaton::Tape create foo a b c
    foo L ; foo erase
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a _ c} 1}

test tape-1.6 {} -body {
    ::automaton::Tape create foo -blank X a b c
    foo L ; foo erase
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo read]
} -cleanup {
    unset data head
    foo destroy
} -result {{a X c} 1 X}

test tape-1.7 {} -body {
    ::automaton::Tape create foo -start 2 a b c d e
    oo::objdefine foo export variable CutLeft
    foo CutLeft
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{d e} 0}

test tape-1.8 {} -body {
    ::automaton::Tape create foo -start 2 a b c d e
    oo::objdefine foo export variable CutRight
    foo CutRight
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b} 1}

test tape-1.9 {} -body {
    ::automaton::Tape create foo -leftbound 1 -start 0 a b c
    foo L
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c} 0}

test tape-1.10 {} -body {
    ::automaton::Tape create foo -rightbound 3 a b c
    foo R ; foo R ; foo R
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c} 2}

test tape-1.11 {} -body {
    ::automaton::Tape create foo -values {a {b 1} c} a b x c
} -cleanup {
} -result {illegal value "x" not in "a, b, c"} -returnCodes error

test stack-1.0 {} -body {
    ::automaton::Stack create foo
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{{}} 0 {}}

test stack-1.1 {} -body {
    ::automaton::Stack create foo a b c
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c} 2 c}

test stack-1.2 {} -body {
    ::automaton::Stack create foo a b c
    foo pop
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a b} 1 b}

test stack-1.3 {} -body {
    ::automaton::Stack create foo a b c
    foo pop ; foo pop ; foo pop
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {a 0 a}

test stack-1.4 {} -body {
    ::automaton::Stack create foo a b c
    foo pop ; foo pop ; foo pop
    foo push x y
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a x y} 2 y}

test stack-1.5 {} -body {
    ::automaton::Stack create foo a b c
    foo adjust
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a b} 1 b}

test stack-1.6 {} -body {
    ::automaton::Stack create foo a b c
    foo adjust q
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a b q} 2 q}

test stack-1.7 {} -body {
    ::automaton::Stack create foo a b c
    foo adjust q r s
    oo::objdefine foo export variable
    foo variable data head
    list $data $head [foo top]
} -cleanup {
    unset data head
    foo destroy
} -result {{a b s r q} 4 q}

test input-1.0 {} -body {
    ::automaton::Input create foo a b c
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c Îµ} 0}

test input-1.1 {} -body {
    ::automaton::Input create foo -empty E a b c
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c E} 0}

test input-1.2 {} -body {
    ::automaton::Input create foo -empty E a b c
    set res {}
    for {set i 0} {$i < 5} {incr i} {
        lappend res [foo read]
    }
    oo::objdefine foo export variable
    foo variable data head
    list $data $head $res
} -cleanup {
    unset data head
    foo destroy
} -result {{a b c E} 3 {a b c E E}}

test input-1.3 {} -body {
    ::automaton::Input create foo -empty E
    oo::objdefine foo export variable
    foo variable data head
    list $data $head
} -cleanup {
    unset data head
    foo destroy
} -result {E 0}

cleanupTests ; return
